# Spam Email Detection using Naive Bayes Classifier

## 🧪 Step 1: Import Libraries
import pandas as pd
import random
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score
import seaborn as sns
import matplotlib.pyplot as plt


## 📄 Step 2: Generate a Synthetic Dataset


spam_templates = [
    "Congratulations! You've won a {amount} gift card. Click here to claim.",
    "Urgent! Your account has been suspended. Verify now.",
    "Winner! You won a {item}. Send your details.",
    "Limited-time offer! Buy one, get one free. Order today.",
    "You have been selected for a free {item}. Call now!",
    "Claim your prize now before it expires.",
    "Your number was chosen in our lucky draw!",
    "Act fast! This offer ends in {hours} hours.",
    "Get your free subscription to {service} today!",
    "Important notice: Update your payment info immediately."
]

ham_templates = [
    "Hi {name}, how are you doing today?",
    "Don't forget our meeting at {time}.",
    "Can you review the document I sent?",
    "Let's catch up for coffee tomorrow.",
    "Please bring the {item} with you.",
    "I'm running late. Will be there in {minutes} mins.",
    "Are we still on for tonight?",
    "Check out this article I found.",
    "I'll send the report by {time}.",
    "Thanks for your help earlier."
]

def generate_message(template):
    return (template
            .replace("{amount}", f"${random.randint(50, 1000)}")
            .replace("{item}", random.choice(["iPhone", "voucher", "cruise", "headphones"]))
            .replace("{hours}", str(random.randint(1, 24)))
            .replace("{service}", random.choice(["Netflix", "Spotify", "Amazon Prime"]))
            .replace("{name}", random.choice(["John", "Alice", "Tejaswini", "Mike", "Sara"]))
            .replace("{time}", f"{random.randint(1, 12)}:00 {'AM' if random.random() > 0.5 else 'PM'}")
            .replace("{minutes}", str(random.randint(1, 60))))

spam_messages = [{"label": "spam", "message": generate_message(random.choice(spam_templates))} for _ in range(15000)]
ham_messages = [{"label": "ham", "message": generate_message(random.choice(ham_templates))} for _ in range(15000)]

all_messages = spam_messages + ham_messages
random.shuffle(all_messages)

# Create DataFrame
df = pd.DataFrame(all_messages)



## 🏷 Step 3: Encode Labels
We map "ham" to 0 and "spam" to 1.


df['label'] = df['label'].map({'ham': 0, 'spam': 1})


## 🔀 Step 4: Split Dataset
We split 80% for training and 20% for testing.


X_train, X_test, y_train, y_test = train_test_split(
    df['message'], df['label'], test_size=0.2, random_state=42
)


## 🧠 Step 5: Vectorize Text (TF-IDF)
Convert the raw text messages into numerical features.


vectorizer = TfidfVectorizer(stop_words='english', max_df=0.7)
X_train_tf = vectorizer.fit_transform(X_train)
X_test_tf = vectorizer.transform(X_test)


## 🤖 Step 6: Train Naive Bayes Classifier
We use the Multinomial Naive Bayes algorithm for classification.


model = MultinomialNB()
model.fit(X_train_tf, y_train)


## 📊 Step 7: Evaluate the Model
Check accuracy and other performance metrics.


y_pred = model.predict(X_test_tf)
print("\nClassification Report:\n", classification_report(y_test, y_pred))
print("Accuracy:", accuracy_score(y_test, y_pred))



## 📉 Step 8: Visualize Confusion Matrix
Shows how well the model is classifying messages.


cm = confusion_matrix(y_test, y_pred)
sns.heatmap(cm, annot=True, fmt="d", cmap="Blues", xticklabels=["Ham", "Spam"], yticklabels=["Ham", "Spam"])
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.title("Confusion Matrix")
plt.show()

